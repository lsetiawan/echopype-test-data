name: Release
on:
  schedule:
    # Runs at 00:01 every day
    - cron: '1 0 * * *'
  workflow_dispatch:

env:
  RCLONE_DRIVE_SCOPE: drive
  RCLONE_CONFIG_GDRIVE_TYPE: drive
  TEMP_RCLONE_DIR: /opt/rclone_temp
  GDRIVE_ACCT_FILE: google-echopype.json

permissions:
  contents: write

jobs:
  tag-data:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      NEW_TAG: ${{ steps.generate_tag.outputs.NEW_TAG }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - name: Setup tag pattern
      run: |
        DATE_TAG="$( date -u '+%Y.%m.%d' )"
        VERSION_PREFIX="v"
        VERSION_TAG="${VERSION_PREFIX}${DATE_TAG}"
        echo "Version: $VERSION_TAG"
        echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
    - name: Get latest tag
      run: |
        LATEST_TAG=$(git tag --list "$VERSION_TAG*" --sort=-version:refname | head -n 1)
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
    - name: Generate Git Tag
      id: generate_tag
      run: |
        if [ -z "$LATEST_TAG" ]; then
            # No tag exists, so this is the first one
            NEW_TAG="${VERSION_TAG}"
        else
            # Look to see if there is a patch tag
            PATCH_TAG=$(git tag --list "$VERSION_TAG.*" --sort=-version:refname | head -n 1)
            if [ -z "$PATCH_TAG" ]; then
                # No patch tag exists, so this is the first patch tag
                VERSION_PATCH=1
            else
                # Get the patch number from the latest patch tag
                VERSION_PATCH=$(echo $PATCH_TAG | grep -oE '[0-9]+$')
                # Increment the patch number
                VERSION_PATCH=$((VERSION_PATCH + 1))
            fi
            NEW_TAG="${VERSION_TAG}.${VERSION_PATCH}"
        fi
        
        echo "Generated new tag: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
  build-and-release:
    needs: tag-data
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash -l {0}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
            environment-name: build-env
            create-args: >-
                python=3.10
                rclone
                pygithub
            cache-environment: true
            post-cleanup: 'all'
      - name: Check rclone version
        run: rclone version
      - name: Setup rclone temp dir
        run: |
            if [ -d "${{env.TEMP_RCLONE_DIR}}" ]
            then
                echo "${{env.TEMP_RCLONE_DIR}} found."
            else
                echo "creating ${{env.TEMP_RCLONE_DIR}}"
                mkdir ${{env.TEMP_RCLONE_DIR}}
            fi
      - name: Setup service account file env
        run: |
            echo "RCLONE_DRIVE_SERVICE_ACCOUNT_FILE=${{env.TEMP_RCLONE_DIR}}/${{env.GDRIVE_ACCT_FILE}}" >> $GITHUB_ENV
      - name: Get google json file
        run: |
            echo $GDRIVE_JSON | jq . > $RCLONE_DRIVE_SERVICE_ACCOUNT_FILE
        env:
            GDRIVE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON}}
      - name: Check rclone listing
        run: |
            rclone ls gdrive:
        env:
            RCLONE_DRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
      - name: Set test data dir
        run: echo "TEST_DATA_FOLDER=${{ github.workspace }}/data" >> $GITHUB_ENV
      - name: Clone test data
        run: |
            echo "Removing old test data"
            rm -rf $TEST_DATA_FOLDER
            echo "Copying new test data from google drive"
            rclone copy gdrive: $TEST_DATA_FOLDER
            echo "Done"

            chmod -R ugoa+w $TEST_DATA_FOLDER
            ls -lah $TEST_DATA_FOLDER
        env:
            RCLONE_DRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
      - name: Zip all folders
        shell: python
        run: |
          from pathlib import Path
          import shutil
          import os
          import glob

          test_data_folder = Path(os.environ.get("TEST_DATA_FOLDER"))
          for d in test_data_folder.iterdir():
              # Folders only to zip
              if d.is_dir():
                  shutil.make_archive(d, 'zip', d)
          
          print("Successfully zipped the following files:")
          for f in glob.glob(str((test_data_folder / '*.zip').absolute())):
              print(f)
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          files: ${{ env.TEST_DATA_FOLDER }}/*.zip
          body_path: ${{ env.TEST_DATA_FOLDER }}/README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{needs.tag-data.outputs.NEW_TAG}}
